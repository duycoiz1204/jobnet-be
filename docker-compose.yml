services:
  mongo:
    container_name: mongo
    image: mongo:latest
    ports:
      - 27017:27017
    volumes:
      - mongo:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://root:password@mongo:27017/

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
      - 9411:9411

  maildev:
    container_name: maildev
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025
  # akhq:
  #   image: tchiotludo/akhq
  #   depends_on:
  #     - kafka
  #   ports:
  #     - 8080:8080
  #   restart: unless-stopped
  #   environment:
  #     AKHQ_CONFIGURATION: |
  #       akhq:
  #         connections:
  #           docker-kafka-server:
  #             properties:
  #               bootstrap.servers: "kafka:9092"
  #             schema-registry:
  #               url: "http://schema-registry:8085"
  #             connect:
  #               - name: "connect"
  #                 url: "http://connect:8083"
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_ADMIN_ENABLE_SERVER: 'false'
    restart: unless-stopped

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      # This property provide addresses to connect to the broker. If Client want to connect to broker, it had same address here
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  redis: 
    container_name: redis
    image: redis:latest
    ports:
      - 6379:6379
    command: redis-server --save 60 1 --loglevel warning
    volumes: 
      - redis:/data
  
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.3
    pull_policy: always
    environment:
      - xpack.security.enabled=false
      - "discovery.type=single-node"
    ports:
      - 9200:9200

  # config:
  #   container_name: config
  #   image: arialnguyen/config:latest
  #   pull_policy: always
  #   ports:
  #     - 8888:8888
  #   environment:
  #     - ENCRYPT_KEY=V6yIDf9SkvjmocEu5dCcCFqs7wznTOyq
  #     - CONFIG_GIT_USERNAME=duycoiz1204@gmail.com
  #     - CONFIG_GIT_PASSWORD={cipher}053eb0db02cb458d65ff299f7fbfb4d72e9eed960d1b617a9aa96c99f562e28c160d15fd9bcc517cd949a82f5c496019fa82188cba14bc846363b70b577270f6fe13a75c4b6a9bbf0c812e29d8aa56d0923e749a573e36630e6454a20755bcf2de3888a313371b22087d5cce29687d22
  #   depends_on:
  #     - kafka
  
  # elasticsearch-service:
  #   image: arialnguyen/business:latest
  #   container_name: elasticsearch-service
  #   # pull_policy: always
  #   ports:
  #     - "9201:9201"
  #   command: python manage.py runserver
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - mongo
  #     - post
  

  ## Eureka Server
  # discovery-server:
  #   image: arialnguyen/eureka:latest
  #   container_name: discovery-server
  #   pull_policy: always # pull newest image when run docker-compose command
  #   ports:
  #     - "8761:8761"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker # Select application file to get env
  #   depends_on: # Depends on other service that means wait to check other service start successfull or not. If not it'll not start
  #     - zipkin
  #     - config

  # api-gateway:
  #   image: arialnguyen/api-gateway:latest
  #   container_name: api-gateway
  #   pull_policy: always
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - config
  #     - zipkin
  #     - discovery-server
  
  # application-service:
  #   image: arialnguyen/application:latest
  #   container_name: application-service
  #   pull_policy: always
  #   ports:
  #     - "8086"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - discovery-server
  #     - api-gateway
  #     - config
  #     - mongo
      
  # business-service:
  #   image: arialnguyen/business:latest
  #   container_name: business-service
  #   pull_policy: always
  #   ports:
  #     - "8084"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - discovery-server
  #     - api-gateway
  #     - config
  #     - mongo
  
  # location-service:
  #   image: arialnguyen/location:latest
  #   container_name: location-service
  #   pull_policy: always
  #   ports:
  #     - "8089"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - discovery-server
  #     - api-gateway
  #     - config
  #     - mongo

  # notification-service:
  #   container_name: notification-service
  #   image: arialnguyen/notification:latest
  #   pull_policy: always
  #   ports:
  #     - "8088"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - zipkin
  #     - kafka
  #     - config
  #     - discovery-server
  #     - api-gateway
  #     - mongo
  
  # post-service:
  #   container_name: post-service
  #   image: arialnguyen/post:latest
  #   pull_policy: always
  #   ports:
  #     - "8083"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - zipkin
  #     - kafka
  #     - config
  #     - discovery-server
  #     - api-gateway
  #     - mongo

  # resume-service:
  #   container_name: resume-service
  #   image: arialnguyen/resume:latest
  #   pull_policy: always
  #   ports:
  #     - "8085"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - zipkin
  #     - kafka
  #     - config
  #     - discovery-server
  #     - api-gateway
  #     - mongo
  
  # user-service:
  #   container_name: user-service
  #   image: arialnguyen/user:latest
  #   pull_policy: always
  #   ports:
  #     - "8082"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - zipkin
  #     - kafka
  #     - config
  #     - discovery-server
  #     - api-gateway
  #     - mongo

  # wishlist-service:
  #   container_name: wishlist-service
  #   image: arialnguyen/wishlist:latest
  #   pull_policy: always
  #   ports:
  #     - "8087"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   depends_on:
  #     - zipkin
  #     - kafka
  #     - config
  #     - discovery-server
  #     - api-gateway
  #     - mongo

  ## Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./jobnet-server/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    # depends_on: 
    #   - application-service
    #   - business-service
    #   - location-service
    #   - notification-service
    #   - post-service
    #   - resume-service
    #   - user-service
    #   - wishlist-service

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    links:
      - prometheus:prometheus
    volumes:
      - ./jobnet-server/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
  
  # ollama:
  #   image: arialnguyen/ollama
  #   container_name: ollama
  #   # restart: always
  #   pull_policy: "never"
  #   ports:
  #     - "11434:11434"
  #   volumes:
  #     - ./jobnet-server/ollama:/var/lib/ollama
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: 1
  #             capabilities: [gpu]

    

volumes:
  mongo: {}
  redis: {}
